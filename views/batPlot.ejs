<% layout ('layouts/plot.ejs') %>


<script>

// global data variable
var data = [
    // [new Date(2001, 0, 1), 1],
    // [new Date(2002, 0, 1), 2],
    // [new Date(2003, 0, 1), 2],
    // [new Date(2004, 0, 1), 3],
    // [new Date(2005, 0, 1), 4],
    // [new Date(2006, 0, 1), 5]
]; // format of elements [new Date(2001, 0, 1), 1]

var plotParams = { 
    maxDate: 0,
    minDate: 0,
    maxVal: 0,
    minVal: 0,
    parameter: "",
    title: ""
};

// set the canvas size
var margin = {top: 20, right: 30, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;
    
// create the data scales
var x = d3.time.scale()
    .range([0, width]);
    
var y = d3.scale.linear()
    .range([height, 0]);
    
// create the plot axes
var xAxis = d3.svg.axis()
    .scale(x)
    .ticks(d3.time.hours, 3)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .ticks(13)
    .orient("left");
    

// append the svg element    
var svg = d3.select("body").append("svg")
    .datum(data)
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");  //shift the 0,0 inside the margin

    
plotParams.parameter = <%- JSON.stringify(parameter) %>     //paramter being plotted for labels
plotParams.title = <%- JSON.stringify(title) %>             //graph title

// This code is generalized for any parameter, the URL for the specific parameter is passed in the request
// JSON data is loaded asynchronously so code that depends on the data needs to be in the callback

d3.json(<%- JSON.stringify(plotUrl) %>, function(jsonData){ 

  var ta = [];
  var i = 0;
  jsonData.forEach((record) => {
    //   console.log(record);

      data.push([new Date(record.timeIndex * 1000), record[plotParams.parameter]/1000 ]);

    //   console.log('data: ' + data[i]);

      ta = data[i];
    //   console.log('ta: ' + ta);
      if (ta[1] > plotParams.maxVal){
          plotParams.maxVal = ta[1];
      }
      if (ta[1] < plotParams.minVal){
          plotParams.minVal = ta[1];
      }
      ++i;
  });
  plotParams.minDate = data[0][0];
  plotParams.maxDate = data[data.length - 1][0]
//   console.log(data);
  console.log(plotParams);


// define the plot domains
  x.domain([d3.min(data, function(da){return da[0]}), d3.max(data, function(da){return da[0]})]); //use max & minDate

  
  var yMin = d3.min(data, function(da){return da[1]});
  var yMax = d3.max(data, function(da){return da[1]});
  var yPad = (yMax - yMin) * 0.15;
  
  y.domain([(yMin - yPad) , (yMax + yPad)]);  //10% white space above & below plot line
  
  var yOffset = function(min, max){
    if (min >= 0)
      return height;        //min > 0
    else {                  
      if (max < 0) {
        return height;      // min & max < 0
      }
      else                  // min < 0 < max
        return y(0);
    }
  }


// create the svg line code
  
  var line = d3.svg.line()
      .interpolate("monotone")
      .x(function(d) { return x(d[0]); })
      .y(function(d) { return y(d[1]); });
  
// add the axis
  
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + yOffset(yMin, yMax) + ")")  //was height
      .call(xAxis);
  
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

// plot the line  
  svg.append("path")
      .attr("class", "line")
      .attr("d", line);

// plot the data points
  svg.selectAll(".dot")
      .data(function() { return data; })    //was .data(data)
    .enter().append("circle")
      .attr("class", "dot")
      .attr("cx", line.x())
      .attr("cy", line.y())
      // .attr("cx", function(d){ return d[0]; })
      // .attr("cy", function(d){ return d[1]; })
      .attr("r", 1.5);

// Add the chart title      
  svg.append('text')
    .attr('transform', 'translate(' + width / 2 + ' , ' +  margin.top / 2 + ')')
    .attr('text-anchor', 'middle')
    .attr('font-family', 'sans-serif')
    .attr('font-size', '20px')
    .attr('font-weight', 'bold')
    .text(plotParams.title);
      
});

</script>